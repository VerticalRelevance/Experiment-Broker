{
    "StartAt": "FirstChoiceState",
    "States": {
      "FirstChoiceState": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Payload.state",
            "StringEquals": "pending",
            "Next": "Series_Or_Parallel"
          },
          {
            "Variable": "$.Payload.state",
            "StringEquals": "done",
            "Next": "Exit"
          }
        ]
      },
      "Series_Or_Parallel": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Payload.parallel_enabled",
            "StringEquals": "true",
            "Next": "MapState_Series"
          },
          {
            "Variable": "$.Payload.parallel_enabled",
            "StringEquals": "false",
            "Next": "MapState_Parallel"
          }
        ]
      },
      "MapState_Parallel": {
        "Type": "Map",
        "End": true,
        "InputPath": "$.Payload.list",
        "Iterator": {
          "StartAt": "ProcessPayload (1)",
          "States": {
            "ProcessPayload (1)": {
              "Type": "Task",
              "Resource": "arn:aws:states:::ecs:runTask.sync",
              "Parameters": {
                "Cluster": "${cluster_name}",
                "TaskDefinition": "${task_def_arn}",
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                  "AwsvpcConfiguration": {
                    "Subnets": [$join(", ", [for s in ecs_subnet_ids : "\"${s}\""])}]
                  }
                },
                "Overrides": {
                  "ContainerOverrides": [
                    {
                      "Name": "payload-processor",
                      "Environment": [
                        {
                          "Name": "task_token",
                          "Value.$": "$$.Task.Token"
                        },
                        {
                          "Name": "bucket_name",
                          "Value.$": "$.bucket_name"
                        },
                        {
                          "Name": "experiment_source",
                          "Value.$": "$.experiment_source"
                        },
                        {
                          "Name": "output_bucket",
                          "Value.$": "$.output_bucket"
                        },
                        {
                          "Name": "output_path",
                          "Value.$": "$.output_path"
                        }
                      ]
                    }
                  ]
                }
              },
              "ResultPath": "$",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "BackoffRate": 2,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "ProcessingFailed (1)"
                }
              ],
              "Next": "ChoiceState (1)"
            },
            "ChoiceState (1)": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.state",
                  "StringEquals": "pending",
                  "Next": "Completed (1)"
                },
                {
                  "Variable": "$.state",
                  "StringEquals": "done",
                  "Next": "IsPendingState (1)"
                }
              ]
            },
            "IsPendingState (1)": {
              "Type": "Wait",
              "Seconds": 5,
              "End": true
            },
            "Completed (1)": {
              "Type": "Pass",
              "End": true
            },
            "ProcessingFailed (1)": {
              "Type": "Fail"
            }
          }
        },
        "MaxConcurrency": ${sfn_parallel_max_concurrency}
      },
      "MapState_Series": {
        "Type": "Map",
        "InputPath": "$.Payload.list",
        "Iterator": {
          "StartAt": "ProcessPayload",
          "States": {
            "ProcessPayload": {
              "Type": "Task",
              "Resource": "arn:aws:states:::ecs:runTask.sync",
              "Parameters": {
                "Cluster": "${cluster_name}",
                "TaskDefinition": "${task_def_arn}",
                "LaunchType": "FARGATE",
                "NetworkConfiguration": {
                  "AwsvpcConfiguration": {
                    "Subnets": "Subnets": [$join(", ", [for s in ecs_subnet_ids : "\"${s}\""])}]
                  }
                },
                "Overrides": {
                  "ContainerOverrides": [
                    {
                      "Name": "payload-processor",
                      "Environment": [
                        {
                          "Name": "task_token",
                          "Value.$": "$$.Task.Token"
                        },
                        {
                          "Name": "bucket_name",
                          "Value.$": "$.bucket_name"
                        },
                        {
                          "Name": "experiment_source",
                          "Value.$": "$.experiment_source"
                        },
                        {
                          "Name": "output_bucket",
                          "Value.$": "$.output_bucket"
                        },
                        {
                          "Name": "output_path",
                          "Value.$": "$.output_path"
                        }
                      ]
                    }
                  ]
                }
              },
              "ResultPath": "$",
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "BackoffRate": 2,
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "ProcessingFailed"
                }
              ],
              "Next": "ChoiceState"
            },
            "ChoiceState": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.state",
                  "StringEquals": "pending",
                  "Next": "Completed"
                },
                {
                  "Variable": "$.state",
                  "StringEquals": "done",
                  "Next": "IsPendingState"
                }
              ]
            },
            "IsPendingState": {
              "Type": "Wait",
              "Seconds": 5,
              "End": true
            },
            "Completed": {
              "Type": "Pass",
              "End": true
            },
            "ProcessingFailed": {
              "Type": "Fail"
            }
          }
        },
        "End": true,
        "MaxConcurrency": 1
      },
      "Exit": {
        "Type": "Pass",
        "End": true
      }
    }
  }